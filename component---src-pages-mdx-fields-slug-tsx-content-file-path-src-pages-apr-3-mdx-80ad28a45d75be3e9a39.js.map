{"version":3,"file":"component---src-pages-mdx-fields-slug-tsx-content-file-path-src-pages-apr-3-mdx-80ad28a45d75be3e9a39.js","mappings":"2LAiCO,MAAMA,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,CC3EA,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,GAAI,MACHC,IAAsBN,EAAMH,YAC/B,OAAOU,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,gXAAiX,KAAMG,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,sCAAuC,KAAMG,EAAAA,cAAoBN,EAAYI,GAAI,KAAM,OACnlB,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,EAAGG,IAAsBN,EAAMH,YAC3E,OAAOY,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,yICTA,MAAMU,EAAWC,IACf,IAAI,KAACC,EAAI,SAAEC,GAAYF,EACvB,OAAOJ,EAAAA,cAAoBO,EAAAA,EAAQ,CACjCC,UAAWH,EAAKI,IAAIC,YAAYC,OAC/BX,EAAAA,cAAoB,IAAK,KAAMK,EAAKI,IAAIC,YAAYE,MAAON,EAAS,EAG5DO,EAAOA,IAAMb,EAAAA,cAAoBc,EAAAA,EAAK,CACjDH,MAAO,iBAGM,SAASI,EAAiBtB,GACvC,OAAOO,EAAAA,cAAoBG,EAAUV,EAAOO,EAAAA,cAAoBgB,EAAAA,QAAqBvB,GACvF,C,+ECde,SAASc,EAAMH,GAA2B,IAA1B,UAAEI,EAAS,SAAEF,GAAUF,EAClD,MAAMC,GAAOY,EAAAA,EAAAA,gBAAe,cAS9B,OACEjB,EAAAA,cAAA,WACIA,EAAAA,cAAA,cAASK,EAAKa,KAAKC,aAAaR,OAClCX,EAAAA,cAAA,WACEA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAIA,EAAAA,cAACoB,EAAAA,KAAI,CAACC,GAAG,KAAI,SACjBrB,EAAAA,cAAA,UAAIA,EAAAA,cAACoB,EAAAA,KAAI,CAACC,GAAG,UAAS,UACtBrB,EAAAA,cAAA,UAAIA,EAAAA,cAACoB,EAAAA,KAAI,CAACC,GAAG,SAAQ,WAGzBrB,EAAAA,cAAA,YACEA,EAAAA,cAAA,UAAKQ,GACJF,GAIT,C,+CCVA,IAhBYF,IAAgB,IAAf,MAAEO,GAAOP,EACpB,MAAMC,GAAOY,EAAAA,EAAAA,gBAAe,cAU5B,OACEjB,EAAAA,cAAA,aAAQW,EAAM,MAAIN,EAAKa,KAAKC,aAAaR,MAAc,C","sources":["webpack://at-2024-day-by-day/./node_modules/@mdx-js/react/lib/index.js","webpack://at-2024-day-by-day/./src/pages/apr3.mdx","webpack://at-2024-day-by-day/./src/pages/{mdx.fields__slug}.tsx","webpack://at-2024-day-by-day/./src/components/layout.tsx","webpack://at-2024-day-by-day/./src/components/seo.tsx"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h1: \"h1\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"First day on the trail! Train was a little late getting into Georgia but my shuttle driver made it work. Everybody including me is a bit concerned about norovirus - I wasn't sure if it was cool to touch the bearbox latch after storing my soap in there for the night. It was pretty cold and windy, down to around 38º - the next few nights are supposed to be colder.\"), \"\\n\", React.createElement(_components.p, null, \"I wonder how formatting will work.\"), \"\\n\", React.createElement(_components.h1, null, \"hmm\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/liam/workspace/gpx-journal/src/pages/apr3.mdx\";\nimport * as React from 'react';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nconst BlogPost = _ref => {\n  let {data, children} = _ref;\n  return React.createElement(Layout, {\n    pageTitle: data.mdx.frontmatter.title\n  }, React.createElement(\"p\", null, data.mdx.frontmatter.date), children);\n};\nconst query = \"1083539204\";\nexport const Head = () => React.createElement(Seo, {\n  title: \"My Blog Post\"\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import React from 'react'\nimport { Link, useStaticQuery, graphql } from 'gatsby'\n\nexport default function Layout({ pageTitle, children }) {\n    const data = useStaticQuery(graphql`\n        query {\n          site {\n            siteMetadata {\n              title\n            }\n          }\n        }\n      `)\n  return (\n    <div>\n        <header>{data.site.siteMetadata.title}</header>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/about\">About</Link></li>\n          <li><Link to=\"/blog\">Blog</Link></li>\n        </ul>\n      </nav>\n      <main>\n        <h1>{pageTitle}</h1>\n        {children}\n      </main>\n    </div>\n  )\n}\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nconst Seo = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <title>{title} | {data.site.siteMetadata.title}</title>\n  )\n}\n\nexport default Seo"],"names":["MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","Object","assign","p","h1","_provideComponents","React","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","pageTitle","mdx","frontmatter","title","date","Head","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","useStaticQuery","site","siteMetadata","Link","to"],"sourceRoot":""}